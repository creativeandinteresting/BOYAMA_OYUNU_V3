{"dependencies":[{"name":"./Host","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"BQhWeBRDaUSxZaA5iU6wGzQsFFs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"JsiSkTypefaceFontProvider\", {\n    enumerable: true,\n    get: function () {\n      return JsiSkTypefaceFontProvider;\n    }\n  });\n  var _Host = require(_dependencyMap[0], \"./Host\");\n  class JsiSkTypefaceFontProvider extends _Host.HostObject {\n    constructor(CanvasKit, ref) {\n      super(CanvasKit, ref, \"FontMgr\");\n    }\n    matchFamilyStyle(_name, _style) {\n      return (0, _Host.throwNotImplementedOnRNWeb)();\n    }\n    countFamilies() {\n      return this.ref.countFamilies();\n    }\n    getFamilyName(index) {\n      return this.ref.getFamilyName(index);\n    }\n    registerFont(typeface, familyName) {\n      const strLen = lengthBytesUTF8(familyName) + 1;\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      const strPtr = this.CanvasKit._malloc(strLen);\n      stringToUTF8(this.CanvasKit, familyName, strPtr, strLen);\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this.ref._registerFont(typeface.ref, strPtr);\n    }\n  }\n  const lengthBytesUTF8 = str => {\n    // TextEncoder will give us the byte length in UTF8 form\n    const encoder = new TextEncoder();\n    const utf8 = encoder.encode(str);\n    return utf8.length;\n  };\n  const stringToUTF8 = (CanvasKit, str, outPtr, maxBytesToWrite) => {\n    // TextEncoder will give us the byte array in UTF8 form\n    const encoder = new TextEncoder();\n    const utf8 = encoder.encode(str);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    const heap = CanvasKit.HEAPU8;\n\n    // Check if there's enough space\n    if (utf8.length > maxBytesToWrite) {\n      throw new Error(\"Not enough space to write UTF8 encoded string\");\n    }\n\n    // Copy the bytes\n    for (let i = 0; i < utf8.length; i++) {\n      heap[outPtr + i] = utf8[i];\n    }\n\n    // Null terminate\n    if (utf8.length < maxBytesToWrite) {\n      heap[outPtr + utf8.length] = 0;\n    }\n  };\n});","lineCount":69,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"JsiSkTypefaceFontProvider"],[10,38,2,0],[11,4,2,0],[12,2,2,0],[13,2,1,0],[13,6,1,0,"_Host"],[13,11,1,0],[13,14,1,0,"require"],[13,21,1,0],[13,22,1,0,"_dependencyMap"],[13,36,1,0],[14,2,2,7],[14,8,2,13,"JsiSkTypefaceFontProvider"],[14,33,2,38],[14,42,2,47,"HostObject"],[14,47,2,57],[14,48,2,57,"HostObject"],[14,58,2,57],[14,59,2,58],[15,4,3,2,"constructor"],[15,15,3,13,"constructor"],[15,16,3,14,"CanvasKit"],[15,25,3,23],[15,27,3,25,"ref"],[15,30,3,28],[15,32,3,30],[16,6,4,4],[16,11,4,9],[16,12,4,10,"CanvasKit"],[16,21,4,19],[16,23,4,21,"ref"],[16,26,4,24],[16,28,4,26],[16,37,4,35],[16,38,4,36],[17,4,5,2],[18,4,6,2,"matchFamilyStyle"],[18,20,6,18,"matchFamilyStyle"],[18,21,6,19,"_name"],[18,26,6,24],[18,28,6,26,"_style"],[18,34,6,32],[18,36,6,34],[19,6,7,4],[19,13,7,11],[19,17,7,11,"throwNotImplementedOnRNWeb"],[19,22,7,37],[19,23,7,37,"throwNotImplementedOnRNWeb"],[19,49,7,37],[19,51,7,38],[19,52,7,39],[20,4,8,2],[21,4,9,2,"countFamilies"],[21,17,9,15,"countFamilies"],[21,18,9,15],[21,20,9,18],[22,6,10,4],[22,13,10,11],[22,17,10,15],[22,18,10,16,"ref"],[22,21,10,19],[22,22,10,20,"countFamilies"],[22,35,10,33],[22,36,10,34],[22,37,10,35],[23,4,11,2],[24,4,12,2,"getFamilyName"],[24,17,12,15,"getFamilyName"],[24,18,12,16,"index"],[24,23,12,21],[24,25,12,23],[25,6,13,4],[25,13,13,11],[25,17,13,15],[25,18,13,16,"ref"],[25,21,13,19],[25,22,13,20,"getFamilyName"],[25,35,13,33],[25,36,13,34,"index"],[25,41,13,39],[25,42,13,40],[26,4,14,2],[27,4,15,2,"registerFont"],[27,16,15,14,"registerFont"],[27,17,15,15,"typeface"],[27,25,15,23],[27,27,15,25,"familyName"],[27,37,15,35],[27,39,15,37],[28,6,16,4],[28,12,16,10,"strLen"],[28,18,16,16],[28,21,16,19,"lengthBytesUTF8"],[28,36,16,34],[28,37,16,35,"familyName"],[28,47,16,45],[28,48,16,46],[28,51,16,49],[28,52,16,50],[30,6,18,4],[31,6,19,4],[32,6,20,4],[32,12,20,10,"strPtr"],[32,18,20,16],[32,21,20,19],[32,25,20,23],[32,26,20,24,"CanvasKit"],[32,35,20,33],[32,36,20,34,"_malloc"],[32,43,20,41],[32,44,20,42,"strLen"],[32,50,20,48],[32,51,20,49],[33,6,21,4,"stringToUTF8"],[33,18,21,16],[33,19,21,17],[33,23,21,21],[33,24,21,22,"CanvasKit"],[33,33,21,31],[33,35,21,33,"familyName"],[33,45,21,43],[33,47,21,45,"strPtr"],[33,53,21,51],[33,55,21,53,"strLen"],[33,61,21,59],[33,62,21,60],[35,6,23,4],[36,6,24,4],[37,6,25,4],[37,10,25,8],[37,11,25,9,"ref"],[37,14,25,12],[37,15,25,13,"_registerFont"],[37,28,25,26],[37,29,25,27,"typeface"],[37,37,25,35],[37,38,25,36,"ref"],[37,41,25,39],[37,43,25,41,"strPtr"],[37,49,25,47],[37,50,25,48],[38,4,26,2],[39,2,27,0],[40,2,28,0],[40,8,28,6,"lengthBytesUTF8"],[40,23,28,21],[40,26,28,24,"str"],[40,29,28,27],[40,33,28,31],[41,4,29,2],[42,4,30,2],[42,10,30,8,"encoder"],[42,17,30,15],[42,20,30,18],[42,24,30,22,"TextEncoder"],[42,35,30,33],[42,36,30,34],[42,37,30,35],[43,4,31,2],[43,10,31,8,"utf8"],[43,14,31,12],[43,17,31,15,"encoder"],[43,24,31,22],[43,25,31,23,"encode"],[43,31,31,29],[43,32,31,30,"str"],[43,35,31,33],[43,36,31,34],[44,4,32,2],[44,11,32,9,"utf8"],[44,15,32,13],[44,16,32,14,"length"],[44,22,32,20],[45,2,33,0],[45,3,33,1],[46,2,34,0],[46,8,34,6,"stringToUTF8"],[46,20,34,18],[46,23,34,21,"stringToUTF8"],[46,24,34,22,"CanvasKit"],[46,33,34,31],[46,35,34,33,"str"],[46,38,34,36],[46,40,34,38,"outPtr"],[46,46,34,44],[46,48,34,46,"maxBytesToWrite"],[46,63,34,61],[46,68,34,66],[47,4,35,2],[48,4,36,2],[48,10,36,8,"encoder"],[48,17,36,15],[48,20,36,18],[48,24,36,22,"TextEncoder"],[48,35,36,33],[48,36,36,34],[48,37,36,35],[49,4,37,2],[49,10,37,8,"utf8"],[49,14,37,12],[49,17,37,15,"encoder"],[49,24,37,22],[49,25,37,23,"encode"],[49,31,37,29],[49,32,37,30,"str"],[49,35,37,33],[49,36,37,34],[50,4,38,2],[51,4,39,2],[52,4,40,2],[52,10,40,8,"heap"],[52,14,40,12],[52,17,40,15,"CanvasKit"],[52,26,40,24],[52,27,40,25,"HEAPU8"],[52,33,40,31],[54,4,42,2],[55,4,43,2],[55,8,43,6,"utf8"],[55,12,43,10],[55,13,43,11,"length"],[55,19,43,17],[55,22,43,20,"maxBytesToWrite"],[55,37,43,35],[55,39,43,37],[56,6,44,4],[56,12,44,10],[56,16,44,14,"Error"],[56,21,44,19],[56,22,44,20],[56,69,44,67],[56,70,44,68],[57,4,45,2],[59,4,47,2],[60,4,48,2],[60,9,48,7],[60,13,48,11,"i"],[60,14,48,12],[60,17,48,15],[60,18,48,16],[60,20,48,18,"i"],[60,21,48,19],[60,24,48,22,"utf8"],[60,28,48,26],[60,29,48,27,"length"],[60,35,48,33],[60,37,48,35,"i"],[60,38,48,36],[60,40,48,38],[60,42,48,40],[61,6,49,4,"heap"],[61,10,49,8],[61,11,49,9,"outPtr"],[61,17,49,15],[61,20,49,18,"i"],[61,21,49,19],[61,22,49,20],[61,25,49,23,"utf8"],[61,29,49,27],[61,30,49,28,"i"],[61,31,49,29],[61,32,49,30],[62,4,50,2],[64,4,52,2],[65,4,53,2],[65,8,53,6,"utf8"],[65,12,53,10],[65,13,53,11,"length"],[65,19,53,17],[65,22,53,20,"maxBytesToWrite"],[65,37,53,35],[65,39,53,37],[66,6,54,4,"heap"],[66,10,54,8],[66,11,54,9,"outPtr"],[66,17,54,15],[66,20,54,18,"utf8"],[66,24,54,22],[66,25,54,23,"length"],[66,31,54,29],[66,32,54,30],[66,35,54,33],[66,36,54,34],[67,4,55,2],[68,2,56,0],[68,3,56,1],[69,0,56,2],[69,3]],"functionMap":{"names":["<global>","JsiSkTypefaceFontProvider","constructor","matchFamilyStyle","countFamilies","getFamilyName","registerFont","lengthBytesUTF8","stringToUTF8"],"mappings":"AAA;OCC;ECC;GDE;EEC;GFE;EGC;GHE;EIC;GJE;EKC;GLW;CDC;wBOC;CPK;qBQC;CRsB"},"hasCjsExports":false},"type":"js/module"}]}